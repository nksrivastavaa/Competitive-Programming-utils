{
	"Disjoint Set Union": {
		"prefix": "dsu",
		"body": [
			"class DSU {",
			"  public:",
			"    int nodes;",
			"    int connected_components;",
			"    vector<int> parent;",
			"    vector<int> size;",
			" ",
			"    DSU(int n) { // nodes : 0 1 2 ... n-1",
			"      nodes = n;",
			"      connected_components = n;",
			"      parent.resize(n);",
			"      size.assign(n, 1);",
			"      iota(parent.begin(), parent.end(), 0);",
			"    }",
			" ",
			"    int find(int v) {",
			"      return (parent[v] == v ? v : (parent[v] = find(parent[v])));",
			"    }",
			" ",
			"    bool unite(int v, int u) {",
			"      v = find(v);",
			"      u = find(u);",
			"      if(v != u) {",
			"        if(size[v] < size[u]) swap(v, u);",
			"        parent[u] = v;",
			"        size[v] += size[u];",
			"        connected_components--;",
			"        return true;",
			"      } ",
			"      return false;",
			"    }",
			" ",
			"    int component_size(int v) {",
			"      v = find(v);",
			"      return size[v];",
			"    }",
			"};"
		],
		"description": "Disjoint Set Union"
	}
}